{"version":3,"sources":["Icon/types.js","Icon/Icon.js","WeatherCard/WeatherForecast.js","WeatherCard/WeatherCard.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["WEATHER_ICONS_BY_TYPE","rain","clear","clouds","unknown","Icon","type","weatherType","this","props","className","iconSize","small","medium","large","size","React","Component","WeatherForecast","weatherToday","weatherOnDate","temperature","temp","day","moment","add","id","format","substr","toUpperCase","weather","main","toLowerCase","Math","round","WeatherCard","state","fetchWeatherData","bind","fetch","json","data","setState","list","arr","i","push","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0VAAMA,EAAwB,CAC1BC,KAAM,OACNC,MAAO,QACPC,OAAQ,SACRC,QAAS,WCAQC,E,iLAWP,IDRuBC,ECSrBC,EAAgBC,KAAKC,MAArBF,YACR,OACI,6BACI,uBAAGG,UAAS,+BAA0BF,KAAKG,SAA/B,gBDZSL,ECY0DC,EDXpFP,EAAsBM,GAAQ,kB,+BCIjC,MALc,CACVM,MAAO,KACPC,OAAQ,KACRC,MAAO,OAJMN,KAAKC,MAAdM,MAMa,a,GARKC,IAAMC,W,gBCAnBC,E,iLAGf,IAAMC,EAAeX,KAAKC,MAAMW,cAC1BC,EAAcF,EAAaG,KAAKC,IAEtC,OACI,iCACI,6BAAMC,IAAOL,GAAcM,IAAIjB,KAAKC,MAAMiB,GAAI,QAAQC,OAAO,QAAQC,OAAO,EAAG,GAAGC,eAClF,yBAAKnB,UAAU,QAAO,kBAAC,EAAD,CAAMK,KAAK,QAAQR,YAAaY,EAAaW,QAAQ,GAAGC,KAAKC,iBACnF,6BAAK,8BAAOC,KAAKC,MAAMb,GAAlB,e,GAV0BL,IAAMC,WCE9BkB,E,YACnB,WAAY1B,GAAQ,IAAD,8BACjB,4CAAMA,KACD2B,MAAQ,CAAEN,QAAS,IAExB,EAAKO,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBAJP,E,iFAQjB9B,KAAK6B,qB,yKAIcE,MAAM,0FAAD,OCnBL,qC,cDmBbC,E,gBACaA,EAAKA,O,OAAlBC,E,OAENjC,KAAKkC,SAAS,CAACZ,QAASW,I,mIAGhB,IACAX,EAAYtB,KAAK4B,MAAjBN,QAER,IAAIA,EAAQa,KACV,OAAO,KAMT,IAHA,IAAMxB,EAAeW,EAAQa,KAAK,GAC5BtB,EAAcF,EAAaG,KAAKC,IAClCqB,EAAM,GACFC,EAAI,EAAGA,EAAI,EAAGA,IACpBD,EAAIE,KAAK,kBAAC,EAAD,CAAiB1B,cAAeU,EAAQa,KAAKE,GAAInB,GAAImB,EAAGE,IAAKF,KAIxE,OACI,yBAAKnC,UAAU,eACX,6BAASA,UAAU,gBACnB,6BACE,0BAAMA,UAAU,QAAQc,IAAOL,GAAcQ,OAAO,gBAAgBE,eACpE,0BAAMnB,UAAU,QAAQc,IAAOL,GAAcQ,OAAO,QAAQE,eAC5D,yBAAKnB,UAAU,eACb,0BAAMA,UAAU,oBAAoBuB,KAAKC,MAAMb,GAA/C,SACA,8BAAM,kBAAC,EAAD,CAAMN,KAAK,QAAQR,YAAaY,EAAaW,QAAQ,GAAGC,KAAKC,mBAGvE,6BACE,8BAdG,OAeKH,iBAIV,6BAASnB,UAAU,YAChBkC,Q,GApD0B5B,IAAMC,WEShC+B,MAVf,WACE,OACE,yBAAKtC,UAAU,QACb,0BAAMA,UAAU,WACd,kBAAC,EAAD,SCGYuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.318b5aeb.chunk.js","sourcesContent":["const WEATHER_ICONS_BY_TYPE = {\n    rain: \"rain\",\n    clear: \"clear\",\n    clouds: \"cloudy\",\n    unknown: \"unknown\"\n};\n\nexport const getIconByWeatherType = (type) => {\n    return WEATHER_ICONS_BY_TYPE[type || 'unknown'];\n}","import React from 'react';\n\nimport { getIconByWeatherType } from './types';\n\nexport default class Icon extends React.Component {\n    get iconSize() {\n        const { size } = this.props;\n        const sizes = {\n            small: '32',\n            medium: '64',\n            large: '128'\n        };\n        return sizes[size || 'small'];\n    }\n    \n    render() {\n        const { weatherType } = this.props;\n        return (\n            <div >\n                <i className={`wu wu-solid-black wu-${this.iconSize} wu-${getIconByWeatherType(weatherType)}`} />\n            </div>\n        );\n    }  \n}\n\n\n","import React from 'react';\nimport Icon from '../Icon/index';\nimport moment from 'moment';\n\nexport default class WeatherForecast extends React.Component {\n    \n    render() {\n      const weatherToday = this.props.weatherOnDate;\n      const temperature = weatherToday.temp.day;\n  \n      return (\n          <section>\n              <div>{moment(weatherToday).add(this.props.id, 'days').format('dddd').substr(0, 3).toUpperCase()}</div>\n              <div className=\"icon\"><Icon size=\"small\" weatherType={weatherToday.weather[0].main.toLowerCase()} /></div>\n              <div><span>{Math.round(temperature)}&#176;C</span></div>\n          </section>\n        );\n    }  \n  }","import React from 'react';\nimport Icon from '../Icon/index';\nimport WeatherForecast from './WeatherForecast';\nimport { API_KEY } from '../utils';\nimport moment from 'moment';\n\nexport default class WeatherCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { weather: {} };\n\n    this.fetchWeatherData = this.fetchWeatherData.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchWeatherData();\n  }\n\n  async fetchWeatherData() {\n    const json = await fetch(`https://api.openweathermap.org/data/2.5/forecast/daily?q=Kyiv&units=metric&cnt=7&appid=${API_KEY}`);\n    const data = await json.json();\n\n    this.setState({weather: data});\n  }\n  \n  render() {\n    const { weather } = this.state;\n\n    if(!weather.list) {\n      return null;\n    }\n\n    const weatherToday = weather.list[0];\n    const temperature = weatherToday.temp.day;\n    let arr = [];\n    for(let i = 0; i < 7; i++) {\n      arr.push(<WeatherForecast weatherOnDate={weather.list[i]} id={i} key={i} />);\n    }\n    const city = \"Kyiv\";\n\n    return (\n        <div className=\"weatherCard\">\n            <section className=\"todayWeather\">\n            <div>\n              <span className=\"date\">{moment(weatherToday).format('MMMM Do YYYY').toUpperCase()}</span>\n              <span className=\"date\">{moment(weatherToday).format('dddd').toUpperCase()}</span>\n              <div className=\"temperature\">\n                <span className='temperatureToday'>{Math.round(temperature)}&#176;C</span>\n                <span><Icon size=\"large\" weatherType={weatherToday.weather[0].main.toLowerCase()} /></span>\n              </div>\n            </div>\n            <div>\n              <span>\n                {city.toUpperCase()}\n              </span>\n            </div>\n            </section>\n            <section className=\"forecast\">\n              {arr}\n            </section>\n        </div>\n      );\n  }  \n}\n\n\n","export const API_KEY = \"47fe20af59af3bbf2a3b306a18fdb1d7\";\n\nexport const getDateFromDT = (dt) => {\n    return new Date(dt * 1000);\n}\n\n","import React from 'react';\nimport './App.css';\n\nimport WeatherCard from './WeatherCard/index';\n\nfunction App() {\n  return (\n    <div className=\"base\">\n      <main className=\"content\">\n        <WeatherCard/>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './Icon/wu-icons-style.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}